<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spir_minion_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initial variables for enemy object
state = minion_states.idle;
image_speed = 0.2;
grav = 0.2;
hsp = 0; //horizontal speed
move = 0;
movespeed = 3;
dir = -1;
hsp_carry = 0; //Platform movespeed
vsp = 0; //vertical speed

attackCounter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attackCounter++;

switch(state){
    case minion_states.idle:
    {
        move = 0;
        hsp = 0;
        vsp = vsp+grav;
        sprite_index = spr_minion_idle;
        if(distance_to_object(obj_player) &lt; 600 &amp;&amp; (attackCounter &gt;= 30))
            state = minion_states.chase;
        break;
    }
    
    case minion_states.chase:
    {
        dir = sign(obj_player.x - x);   //Make enemy face player.
        move = dir * -1;
        hsp = dir * movespeed; //Movespeed of enemy
        vsp = vsp+grav;
        
        //Animate
        if (move != 0) 
            image_xscale = move;
        if (place_meeting(x,y+1, obj_wall)){
            if (move != 0)
                sprite_index = spr_minion_run;
        }
        
        if(distance_to_object(obj_player) &lt; 33)
            state = minion_states.attack;
        if(distance_to_object(obj_player) &gt; 700)
            state = minion_states.idle;
        break;
    }
    
    case minion_states.attack:
    {        
    
            hsp = 0;
        
        if (attackCounter &gt;= 30){
    
        //Start animation
        sprite_index = spr_minion_atk;
        
        
        //Check damage frames
        if(image_index &gt;= 3 &amp;&amp; image_index &lt;= 3.2){
            audio_play_sound(snd_minionAttack,10,0)
        
            with(instance_create(x, y, obj_hb_minion_atk)){
                //Flip based on direction
                image_xscale = other.image_xscale;
                
                //Collision between enemy and player
                with(instance_place(x, y, obj_player)){
                    scr_getInputs(0);
                    obj_player.hsp = 8* (facing * -1);
                    obj_player.vsp = -3;
                    state = states.take_damage; //Go into damage state
                    } 
                    
                           
                }    
            }
        }
        
                
        

    }
    }
//}

scr_collideAndMove();


/*



//effect_create_above(ef_snow, 0, 0, 1, c_white);
//effect_create_below(ef_smokeup, x, y, choose(0, 1, 2), c_blue);

hsp = dir * movespeed; //movespeed left or right
vsp += grav;
move = dir * -1;



//horizontal collision
if(place_meeting(x+hsp,y,obj_wall)){
    while(!place_meeting(x+sign(hsp),y,obj_wall)){
    x += sign(hsp);
    }
    hsp = 0;
    //change direction when hitting a wall
    dir*= -1;   
}
x += hsp;


//vertical collision
if(place_meeting(x,y+vsp,obj_wall)){
    while(!place_meeting(x,y+sign(vsp),obj_wall)){
    y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

//Enemy collision
if (place_meeting(x,y,obj_player))
{



with(obj_player) vsp += 1;
instance_create(0, 0, effect_shake);
}
//else{
//    if (vsp &lt; 0) sprite_index = spr_player_jump; else sprite_index = spr_player_fall;
//}


*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sprite_index == spr_minion_atk){
    attackCounter = 0;
    state = minion_states.idle;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
