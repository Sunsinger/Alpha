<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spir_minion_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initial variables for minion object
state = minion_states.idle;
image_speed = 0.2;
grav = 0.2;
hsp = 0; //horizontal speed
move = 0;
movespeed = 3; //Minion moves 3 pixels per frame
dir = -1;
hsp_carry = 0; //Platform movespeed
vsp = 0; //Vertical speed
frict = 1; //Rate at which the enemy deccelerates
attackCounter = 0;
comboChance = random(10);
jumpCounter = 0;
invincible = false;
hp = 4; //Minion health
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Runs after minion is injured and invincibility has expired
invincible = false;
state = minion_states.chase;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Runs when minion dies

//Creates Smoke effects
effect_create_above(ef_smoke, x, y+20, 1, c_white);
effect_create_above(ef_smoke, x, y+20, 2, c_white);
effect_create_above(ef_smoke, x, y+20, 3, c_white);

//Heart Drop Script
scr_enemyDrop(x,y);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Minion States

//Variable that determines time between attacks/movements
attackCounter++;
jumpCounter++;


switch(state){

    //Idle State
    case minion_states.idle:
    {
        image_speed = .2;
        move = 0;
        hsp = 0;
        vsp = vsp+grav;
        comboChance = random(10);
        sprite_index = spr_minion_idle;
        if(distance_to_object(obj_player) &lt; 600 &amp;&amp; (attackCounter &gt;= 30))
            state = minion_states.chase;
        break;
    }
    
    
    //Chase State
    case minion_states.chase:
    {
        image_speed = .2;
        dir = sign(obj_player.x - x);   //Make enemy face minion
        move = dir * -1;        //Move towards player
        hsp = dir * movespeed; //Movespeed of minion
        vsp = vsp+grav;         //Gravity Variable
        
        //Animate
        if (move != 0) 
            image_xscale = move;
        if (place_meeting(x,y+1, obj_wall)){
            if (move != 0)
                sprite_index = spr_minion_run;
        }
        
        //Minion decides what to do based on distance from player
    
        //Jump over obstacle
        if((distance_to_object(obj_player) &lt; 700) &amp;&amp; (place_meeting(x+(20*dir), y, obj_wall)) &amp;&amp; (place_meeting(x, y+1, obj_wall)) &amp;&amp; jumpCounter &gt;= 60){
        vsp = -10;
        jumpCounter = 0;
        }
        
        else if(distance_to_object(obj_player) &lt; 73){
            //30% chance to combo attack 
            if(comboChance &gt;= 7)
                state = minion_states.comboAttack;
            else 
                state = minion_states.attack;
        }
            
            
        else if(distance_to_object(obj_player) &gt; 700)
            state = minion_states.idle;
        break;
    }
    
    //Injured State
    case minion_states.damaged:
    { 
     scr_collideAndMove();
     sprite_index = spr_minion_injured;
     break;
    }
    
    //Death State
    case minion_states.death:
    {  
     hsp = 0;
     image_speed = .1;
     sprite_index = spr_minion_death;
     break;
    }
    
    //Attack State
    case minion_states.attack:
    {      
        //Stop movement
        hsp = 0;
        
        //Checks if minion can attack again
        if (attackCounter &gt;= 45){
    
            //Start animation 
            if(sprite_index != spr_minion_atk){
                image_speed = .2;
                sprite_index = spr_minion_atk;
                image_index = 0;
            }
        
            //Check damage frames
            if(image_index &gt;= 2.1 &amp;&amp; image_index &lt;= 2.2){
                audio_play_sound(snd_minionAttack,10,0)
        
                //Creates attack hitbox
                with(instance_create(x, y, obj_hb_minion_atk)){
                    //Flip based on direction
                    image_xscale = other.image_xscale;
                
                    //Collision between enemy and player
                    with(instance_place(x, y, obj_player)){
                        scr_getInputs(0);
                        obj_player.hsp = 8* (facing * -1);
                        obj_player.vsp = -3;
                        state = states.take_damage; //Go into damage state
                    }
                }    
            }                       
        }
    }//End attack state
    
    
    case minion_states.comboAttack:
    {
        
        //Stop movement
        hsp = 0;
        
        //Check attack cooldown
        if(attackCounter &gt;= 45){
        
            //Start animation 
            if(sprite_index != spr_minion_atk2 &amp;&amp; sprite_index != spr_minion_atk){
                image_speed = .2;
                sprite_index = spr_minion_atk2;
                image_index = 0;
            }
            
            //Check damage frames
            if(image_index &gt;= 2.1 &amp;&amp; image_index &lt;= 2.2){
                audio_play_sound(snd_minionAttack,10,0)
            
                //Creates attack hitbox
                with(instance_create(x, y, obj_hb_minion_atk)){
                    //Flip based on direction
                    image_xscale = other.image_xscale;
                    
                    //Collision between enemy and player
                    with(instance_place(x, y, obj_player)){
                        scr_getInputs(0);
                        obj_player.hsp = 8* (facing * -1);
                        obj_player.vsp = -3;
                        state = states.take_damage; //Go into damage state
                    }
                }    
            }
            
            
            //Check damage frames of second attack
            if(image_index &gt;= 5.1 &amp;&amp; image_index &lt;= 5.2){
                audio_play_sound(snd_minionAttack,10,0)
            
                //Creates attack hitbox
                with(instance_create(x, y, obj_hb_minion_atk2)){
                    //Flip based on direction
                    image_xscale = other.image_xscale;
                    
                    //Collision between enemy and player
                    with(instance_place(x, y, obj_player)){
                        scr_getInputs(0);
                        obj_player.hsp = 8* (facing * -1);
                        obj_player.vsp = -3;
                        state = states.take_damage; //Go into damage state
                    }
                }    
            }    
        }
    }//End Combo Attack state
}
scr_collideAndMove();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hb_player_aa">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Minion is invicible for a few frames after getting attacked
 if(!invincible){
 
 audio_play_sound(snd_punch_impact,10,0);
 //audio_play_sound(snd_minion_injured,11,0);
 
 invincible = true;

 hp--

 if (hp &lt;= 0){ //minion dies
     alarm[10] = 40;
     state = minion_states.death;
     }
 else{  //minion takes damage
     alarm[11] = 20;
     state = minion_states.damaged;
     vsp = -5
     hsp = 4 * -dir
     }
 

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hb_player_la">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> ///minion is invincible for a few frames after getting attacked
 if(!invincible){
 
 audio_play_sound(snd_punch_impact,10,0);
 
 invincible = true;

 hp--

 if (hp &lt;= 0){ //minion dies
     alarm[10] = 40;
     state = minion_states.death;
     }
 else{   //take damage
     alarm[11] = 20;
     state = minion_states.damaged;
     vsp = -5
     hsp = 4 * -dir
     }
 

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack ends
if(sprite_index == spr_minion_atk){
    attackCounter = 0;
    state = minion_states.idle;
}
if(sprite_index == spr_minion_atk2){
    attackCounter = 0;
    state = minion_states.idle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
