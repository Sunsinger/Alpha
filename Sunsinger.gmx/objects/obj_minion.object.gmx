<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spir_minion_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initial variables for enemy object
state = e_states.idle;
image_speed = 0.2;
grav = 0.2;
hsp = 0; //horizontal speed
move = 0;
movespeed = 3;
dir = -1;
hsp_carry = 0; //Platform movespeed
vsp = 0; //vertical speed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state){
    case e_states.idle:
    {
        move = 0;
        hsp = 0;
        vsp = vsp+grav;
        if(distance_to_object(obj_player) &lt; 600) 
            state = e_states.chase;
        break;
    }
    
    case e_states.chase:
    {
        dir = sign(obj_player.x - x);   //Make enemy face player.
        move = dir * -1;
        hsp = dir * movespeed; //Movespeed of enemy
        vsp = vsp+grav;
        if(distance_to_object(obj_player) &gt; 700)
            state = e_states.idle;
        break;
    }
}

scr_collideAndMove();

//Animate
if (move != 0) image_xscale = move;
if (place_meeting(x,y+1, obj_wall)){
    if (move != 0){
     sprite_index = spr_minion_run;
    }
    else{
     sprite_index = spr_minion_idle;
    }
}


/*



//effect_create_above(ef_snow, 0, 0, 1, c_white);
//effect_create_below(ef_smokeup, x, y, choose(0, 1, 2), c_blue);

hsp = dir * movespeed; //movespeed left or right
vsp += grav;
move = dir * -1;



//horizontal collision
if(place_meeting(x+hsp,y,obj_wall)){
    while(!place_meeting(x+sign(hsp),y,obj_wall)){
    x += sign(hsp);
    }
    hsp = 0;
    //change direction when hitting a wall
    dir*= -1;   
}
x += hsp;


//vertical collision
if(place_meeting(x,y+vsp,obj_wall)){
    while(!place_meeting(x,y+sign(vsp),obj_wall)){
    y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

//Enemy collision
if (place_meeting(x,y,obj_player))
{



with(obj_player) vsp += 1;
instance_create(0, 0, effect_shake);
}
//else{
//    if (vsp &lt; 0) sprite_index = spr_player_jump; else sprite_index = spr_player_fall;
//}


*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
